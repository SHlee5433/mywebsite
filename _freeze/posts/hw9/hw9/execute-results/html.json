{
  "hash": "63ffe37304217aa558e036a52de75f7d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"LS 빅데이터 스쿨 Homework 9\"\nauthor: \"승학\"\ndate: \"2024-09-10\"\ncategories: [bigdata]\n\n---\n\n## 문제\n\n**종속변수: 백혈병 세포 관측 불가 여부 (REMISS), 1이면 관측 안됨을 의미**\n\n**독립변수:**\n**골수의 세포성 (CELL)**<br>\n**골수편의 백혈구 비율 (SMEAR)**<br>\n**골수의 백혈병 세포 침투 비율 (INFIL)**<br>\n**골수 백혈병 세포의 라벨링 인덱스 (LI)**<br>\n**말초혈액의 백혈병 세포 수 (BLAST)**<br>\n**치료 시작 전 최고 체온 (TEMP)**\n\n## Q1.\n**데이터를 로드하고, 로지스틱 회귀모델을 적합하고, 회귀 표를 작성하세요**\n\n::: {#7979d663 .cell execution_count=1}\n``` {.python .cell-code}\n# 워킹 디렉토리 확인하기\nimport pandas as pd\nimport statsmodels.api as sm\nimport os\ncwd = os.getcwd()\ncwd\n\n# 데이터 로드하기\ndf = pd.read_table('./data/leukemia_remission.txt',delim_whitespace=True)\n\ndf\n\n# 로지스틱 회귀모델 적합 후, 회귀 표 작성\n\nmodel = sm.formula.logit(\"REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP\", data = df).fit()\n\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimization terminated successfully.\n         Current function value: 0.399886\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        14:23:04   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_7484\\3773223679.py:9: FutureWarning:\n\nThe 'delim_whitespace' keyword in pd.read_table is deprecated and will be removed in a future version. Use ``sep='\\s+'`` instead\n\n```\n:::\n:::\n\n\n## Q2.\n**해당 모델은 통계적으로 유의한가요? 그 이유를 검정통계량를 사용해서 설명하시오.**\n\n::: {#677d2a5e .cell execution_count=2}\n``` {.python .cell-code}\nfrom scipy.stats import chi2\n# 검정통계량 : −2(ℓ(𝛽)̂ (0) − ℓ(𝛽)̂ )  =  -2*(-17.186+10.797)  = 12.779\n1 - chi2.cdf(12.779, df=6)  # 0.0467\n\n# 결론 : LLR p-value: 0.0467 < 유의수준 0.05보다 작으니까 통계적으로 유의하다고 할 수 있다.\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nnp.float64(0.0466828104726148)\n```\n:::\n:::\n\n\n## Q3.\n**유의수준 0.2를 기준으로 통계적으로 유의한 변수**\n\n::: {#02d0658e .cell execution_count=3}\n``` {.python .cell-code}\n# p-value가 0.2보다 작은 변수 = LI, TEMP\n```\n:::\n\n\n## Q4.\n**다음 환자에 대한 오즈는 얼마인가요?**<br>\n**CELL (골수의 세포성): 65%**<br>\n**SMEAR (골수편의 백혈구 비율): 45%**<br>\n**INFIL (골수의 백혈병 세포 침투 비율): 55%**<br>\n**LI (골수 백혈병 세포의 라벨링 인덱스): 1.2**<br>\n**BLAST (말초혈액의 백혈병 세포 수): 1.1세포/μL**<br>\n**TEMP (치료 시작 전 최고 체온): 0.9**\n\n::: {#41f117b6 .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\n\nodds = np.exp(64.258 + 30.830 * 0.65 + 24.686 * 0.45 + (-24.975) * 0.55 + 4.361 * 1.2 + (-0.012) * 1.1 + (-100.173) * 0.9)\n\nodds  # 0.038\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nnp.float64(0.03816829812256951)\n```\n:::\n:::\n\n\n## Q5. \n**위 환자의 혈액에서 백혈병 세포가 관측되지 않은 확률은 얼마인가요?**\n\n::: {#8fddefed .cell execution_count=5}\n``` {.python .cell-code}\nodds / (1 + odds) # 0.037\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\nnp.float64(0.0367650391478851)\n```\n:::\n:::\n\n\n## Q6. \n**TEMP 변수의 계수는 얼마이며, 해당 계수를 사용해서 TEMP 변수가 백혈병 치료에 대한 영향을 설명하시오.**\n\n::: {#c8fbc738 .cell execution_count=6}\n``` {.python .cell-code}\n# TEMP 변수의 계수 = -100.173\n# 오즈비 3.127\n# TEMP가 1 올라가면 로그 오즈는 157.86만큼 감소하며, 백혈병 상태에 도달할 가능성이 크게 줄어든다\n\nnp.exp(-100.173)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\nnp.float64(3.129095833510944e-44)\n```\n:::\n:::\n\n\n## Q7. \n**CELL 변수의 99% 오즈비에 대한 신뢰구간을 구하시오.**\n\n::: {#5c0da56e .cell execution_count=7}\n``` {.python .cell-code}\ncell_beta = 30.830\nz = 2.58\nstd_err = 52.135\n\nupper = cell_beta + z * std_err\nlower = cell_beta - z * std_err\n\n# CELL 변수 계수의 신뢰구간\nupper # 165.34\nlower # -103.68\n\n# CELL 변수 오즈비에 대한 신뢰구간\n\nnp.exp(upper), np.exp(lower) \n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n(np.float64(6.390154186383071e+71), np.float64(9.399103174215862e-46))\n```\n:::\n:::\n\n\n## Q8. \n**주어진 데이터에 대하여 로지스틱 회귀 모델의 예측 확률을 구한 후, 50% 이상인 경우 1로 처리하여, 혼동 행렬를 구하시오.**\n\n::: {#bc018794 .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.metrics import confusion_matrix\n\n# 1. 모델을 사용하여 예측 확률을 계산\npred_probs = model.predict(df)\n\n# 2. 50% 기준으로 이진화 (0 또는 1로 변환)\npredictions = [1 if prob > 0.5 else 0 for prob in pred_probs]\n\n# 3. 실제 값 (df['REMISS'])과 예측 값 (predictions) 비교하여 혼동 행렬 계산\nconf_matrix = confusion_matrix(df['REMISS'], predictions)\n\n# 혼동 행렬 출력\nconf_matrix\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\narray([[15,  3],\n       [ 4,  5]])\n```\n:::\n:::\n\n\n## Q9. \n**해당 모델의 Accuracy는 얼마인가요?**\n\n::: {#ca06fe94 .cell execution_count=9}\n``` {.python .cell-code}\n# Accuracy = 전체 예측에서 옳은 예측의 비율\n\nAccuracy = (15 + 5) / (15 + 3 + 4 + 5)\nAccuracy # 0.741\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n0.7407407407407407\n```\n:::\n:::\n\n\n## Q10. \n**해당 모델의 F1 Score를 구하세요.**\n\n::: {#2fbec65a .cell execution_count=10}\n``` {.python .cell-code}\npre = 5 / (5 + 3)\nre = 5 / (5 + 4)\n\nF1 = 2 * (pre * re) / (pre + re)\nF1 # 0.588\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n0.5882352941176471\n```\n:::\n:::\n\n\n",
    "supporting": [
      "hw9_files"
    ],
    "filters": [],
    "includes": {}
  }
}